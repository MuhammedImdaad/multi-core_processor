module IRAM(input clk,
				input [5:0] PC,
				output reg [19:0] instr_out);
				
	reg [20:0] ram [48:0];	//Needs to change
	
	initial begin
		ram [0]  = 0011 00001 000000000000; //write Ax 0000;
		ram [1]  = 0011 00010 010000000000; //write Ay 1024 
		ram [2]  = 0011 00011 100000000000; //write Az 2048 
		
		ram [3]  = 0100 00100 110000000000; //LOADI Rx 3072
		ram [4]  = 0100 00101 110000000001; //LOADI Cx 3073 
		ram [5]  = 0100 00110 110000000010; //LOADI Cy 3074 
		
		ram [6]  = 0101 00100 00110 0000000; //MUL Rx Cy	
		ram [7]  = 0111 01110 000000000000; //MV Sz
		
		ram [8]  = 0010 01000 000000000000; //RST TR2
		ram [9]  = 0010 01011 000000000000; //RST I
		ram [10] = 0010 01100 000000000000; //RST J
		ram [11] = 0010 01101 000000000000; //RST K
		
		ram [12] = 1000 00011 10010 0000000; //ADD Az Cp
		ram [13] = 0111 00011 000000000000; //Mv Az
		ram [14] = 1010 01110 10010 0000000; //SUB Sz Cp
		ram [15] = 1011 000000110000 00000; //JMPZ 48

		ram [16] = 1110 10010 00110 0000000; //DIV Cp Cy
		ram [17] = 0111 01011 000000000000; //Mv I
		ram [18] = 1111 10010 00110 0000000; //MOD Cp Cy
		ram [19] = 0111 01100 000000000000; //Mv J
		ram [20] = 0101 01011 00101 0000000; //MUL I Cx
		ram [21] = 0111 00111 000000000000; //Mv TR1
		ram [22] = 1000 00011 00111 0000000; //ADD Ax TR1
		ram [23] = 0111 10000 000000000000; //Mv PAx
		ram [24] = 0101 01100 00101 0000000; //MUL J Cx
		ram [25] = 0111 00111 000000000000; //Mv TR1
		ram [26] = 1000 00011 00111 0000000; //ADD Ay TR1
		ram [27] = 0111 10001 000000000000; //Mv PAy

		ram [28] = 0110 01001 10000 0000000; //LOAD Vx PAx
		ram [29] = 0110 01010 10001 0000000; //LOAD Vy PAy
		ram [30] = 0101 01001 01010 0000000; //MUL Vx Vy
		ram [31] = 0111 00111 000000000000; //MV TR1
		ram [32] = 1000 00111 01000 0000000; //ADD TR1 TR2
		ram [33] = 0111 01000 000000000000; //MV TR2
		ram [34] = 1001 01101 000000000000; //INC K
		ram [35] = 1010 00101 01101 0000000; //SUB Cx K
		ram [36] = 1011 000001010000 00000; //JMPZ 40

		ram [37] = 1001 10000 000000000000; //INC PAx
		ram [38] = 1001 10001 000000000000; //INC PAy
		ram [39] = 1100 000000011100 00000; //JMP 28	
		
		ram [40] = 0010 01101 000000000000; //RST K		
		ram [41] = 1101 01000 00011 0000000; //STORE TR2 Az
		ram [42] = 0010 01000 000000000000; //RST TR2

		ram [43] = 1000 10010 10100 0000000; //ADD Cp 4
		ram [44] = 0111 10010 000000000000; //MV Cp	
		ram [45] = 1000 00011 10100 0000000; //ADD Az 4
		ram [46] = 0111 00011 000000000000; //MV Az	
		ram [47] = 1100 000000001110 00000; //JMP 14

		ram [48] = 0001 00000000000000000; //END 
	
	end
	
	
	always @(posedge clk)begin
		instr_out = ram[PC];		
		
	end
	

endmodule 